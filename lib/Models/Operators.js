
/**
 * KeenIoLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/05/2017
 */
var BaseModel = require("./BaseModel");
/**
 * Creates an instance of Operators
 *
 * @constructor
 */
Operators = function (obj) {
    if(!obj) {
        this.eq = null;     
        this.ne = null;     
        this.lt = null;     
        this.lte = null;     
        this.gt = null;     
        this.gte = null;     
        this.exists = null;     
        this.min = null;     
        this.contains = null;     
        this.notContains = null;     
        this.within = null;     
        //Append to variable dictionary
        this._variableDict['min'] = 'in';
        this._variableDict['notContains'] = 'not_contains';
    } else {
        this.eq = (obj.eq !== undefined && obj.eq !== null)? obj.eq : null;
        this.ne = (obj.ne !== undefined && obj.ne !== null)? obj.ne : null;
        this.lt = (obj.lt !== undefined && obj.lt !== null)? obj.lt : null;
        this.lte = (obj.lte !== undefined && obj.lte !== null)? obj.lte : null;
        this.gt = (obj.gt !== undefined && obj.gt !== null)? obj.gt : null;
        this.gte = (obj.gte !== undefined && obj.gte !== null)? obj.gte : null;
        this.exists = (obj.exists !== undefined && obj.exists !== null)? obj.exists : null;
        this.min = (obj.in !== undefined && obj.in !== null)? obj.in : null;
        this.contains = (obj.contains !== undefined && obj.contains !== null)? obj.contains : null;
        this.notContains = (obj.not_contains !== undefined && obj.not_contains !== null)? obj.not_contains : null;
        this.within = (obj.within !== undefined && obj.within !== null)? obj.within : null;
        //Append to variable dictionary
        this._variableDict['min'] = 'in';
        this._variableDict['notContains'] = 'not_contains';
    }
};

Operators.prototype = new BaseModel();
Operators.prototype.constructor = Operators;

/**
 * Equal to. Note that if your property?s value is an array, ?eq? can be used to filter for values inside that array. For example, eq: 5 will match a value of [5, 6, 7].
 *
 * @return {string}
 */
Operators.prototype.getEq = function() {
    return this.eq;
};

/**
 * Setter for Eq
 * 
 * @param {string} value 
 */
Operators.prototype.setEq = function(value) {
    this.eq = value;
};

/**
 * Not equal to
 *
 * @return {string}
 */
Operators.prototype.getNe = function() {
    return this.ne;
};

/**
 * Setter for Ne
 * 
 * @param {string} value 
 */
Operators.prototype.setNe = function(value) {
    this.ne = value;
};

/**
 * Less than
 *
 * @return {string}
 */
Operators.prototype.getLt = function() {
    return this.lt;
};

/**
 * Setter for Lt
 * 
 * @param {string} value 
 */
Operators.prototype.setLt = function(value) {
    this.lt = value;
};

/**
 * Less than or equal to
 *
 * @return {string}
 */
Operators.prototype.getLte = function() {
    return this.lte;
};

/**
 * Setter for Lte
 * 
 * @param {string} value 
 */
Operators.prototype.setLte = function(value) {
    this.lte = value;
};

/**
 * Greater than.
 *
 * @return {string}
 */
Operators.prototype.getGt = function() {
    return this.gt;
};

/**
 * Setter for Gt
 * 
 * @param {string} value 
 */
Operators.prototype.setGt = function(value) {
    this.gt = value;
};

/**
 * Greater than or equal to.
 *
 * @return {string}
 */
Operators.prototype.getGte = function() {
    return this.gte;
};

/**
 * Setter for Gte
 * 
 * @param {string} value 
 */
Operators.prototype.setGte = function(value) {
    this.gte = value;
};

/**
 * Whether or not a specific property exists on an event record. When using the ?exists? operator, the value passed in must be either ?true? or ?false?
 *
 * @return {string}
 */
Operators.prototype.getExists = function() {
    return this.exists;
};

/**
 * Setter for Exists
 * 
 * @param {string} value 
 */
Operators.prototype.setExists = function(value) {
    this.exists = value;
};

/**
 * Whether or not the property value is in a given set of values. When using the ?in? operator, the value must be a JSON array of values. Example: [1,2,4,5]
 *
 * @return {string}
 */
Operators.prototype.getIn = function() {
    return this.min;
};

/**
 * Setter for In
 * 
 * @param {string} value 
 */
Operators.prototype.setIn = function(value) {
    this.min = value;
};

/**
 * Whether or not the string property value contains the given set of characters
 *
 * @return {string}
 */
Operators.prototype.getContains = function() {
    return this.contains;
};

/**
 * Setter for Contains
 * 
 * @param {string} value 
 */
Operators.prototype.setContains = function(value) {
    this.contains = value;
};

/**
 * Whether or not the string property value does not contain the given set of characters.
 *
 * @return {string}
 */
Operators.prototype.getNotContains = function() {
    return this.notContains;
};

/**
 * Setter for NotContains
 * 
 * @param {string} value 
 */
Operators.prototype.setNotContains = function(value) {
    this.notContains = value;
};

/**
 * sed to select events within a certain radius of the provided geo coordinate (for geo analysis only).
 *
 * @return {string}
 */
Operators.prototype.getWithin = function() {
    return this.within;
};

/**
 * Setter for Within
 * 
 * @param {string} value 
 */
Operators.prototype.setWithin = function(value) {
    this.within = value;
};


module.exports = Operators;
