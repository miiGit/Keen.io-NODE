
/**
 * KeenIoLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/05/2017
 */
var BaseModel = require("./BaseModel");
/**
 * Creates an instance of Filters
 *
 * @constructor
 */
Filters = function (obj) {
    if(!obj) {
        this.propertyName = null;     
        this.operator = null;     
        this.propertyValue = null;     
        //Append to variable dictionary
        this._variableDict['propertyName'] = 'property_name';
        this._variableDict['propertyValue'] = 'property_value';
    } else {
        this.propertyName = (obj.property_name !== undefined && obj.property_name !== null)? obj.property_name : null;
        this.operator = (obj.operator !== undefined && obj.operator !== null)? new Operators(obj.operator) : null;
        this.propertyValue = (obj.property_value !== undefined && obj.property_value !== null)? obj.property_value : null;
        //Append to variable dictionary
        this._variableDict['propertyName'] = 'property_name';
        this._variableDict['propertyValue'] = 'property_value';
    }
};

Filters.prototype = new BaseModel();
Filters.prototype.constructor = Filters;

/**
 * he name of the property on which you?d like to filte
 *
 * @return {string}
 */
Filters.prototype.getPropertyName = function() {
    return this.propertyName;
};

/**
 * Setter for PropertyName
 * 
 * @param {string} value 
 */
Filters.prototype.setPropertyName = function(value) {
    this.propertyName = value;
};

/**
 * he name of the property on which you?d like to filte
 *
 * @return {Operators}
 */
Filters.prototype.getOperator = function() {
    return this.operator;
};

/**
 * Setter for Operator
 * 
 * @param {Operators} value 
 */
Filters.prototype.setOperator = function(value) {
    this.operator = value;
};

/**
 * the value to compare to the property specified in ?property_name?.
 *
 * @return {dictionary}
 */
Filters.prototype.getPropertyValue = function() {
    return this.propertyValue;
};

/**
 * Setter for PropertyValue
 * 
 * @param {dictionary} value 
 */
Filters.prototype.setPropertyValue = function(value) {
    this.propertyValue = value;
};


module.exports = Filters;
