/**
 * KeenIoLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/05/2017
 */

var _request = require('../Http/Client/RequestClient');
var _configuration = require('../configuration');
var _APIHelper = require('../APIHelper');
var _BaseController = require('./BaseController');

var ExtractionResourceController = {

    /**
     * creates an extraction request for full-form event data with all property values. See Data Extractions for more details. If the query string parameter email is specified, then the extraction will be processed asynchronously and an e-mail will be sent to the specified address when it completes. The email will include a link to a downloadable CSV file. If email is omitted, then the extraction will be processed in-line and JSON results will be returned in the GET request.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {string} version    Required parameter: Example: 
     *     {string} projectId    Required parameter: Example: 
     *     {string} eventCollection    Required parameter: The name of the event collection you are analyzing.
     *     {string|null} filters    Optional parameter: Filters are used to narrow down the events used in an analysis request based on event property values.
     *     {string|null} timeframe    Optional parameter: A Timeframe specifies the events to use for analysis based on a window of time.
     *     {string|null} email    Optional parameter: If an email address is specified, an email will be sent to it when your extraction is ready for download. If email is not specified, your extraction will be processed synchronously and your data will be returned as JSON.
     *     {int|null} latest    Optional parameter: An integer containing the number of most recent events to extract.
     *     {string|null} propertyNames    Optional parameter: A URL-encoded array of strings containing properties you wish to extract. If this parameter is omitted, all properties will be returned.
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getExtractionResource: function (input, callback) {
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/{version}/projects/{project_id}/queries/extraction";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "version": input.version,
            "project_id": input.projectId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "event_collection": input.eventCollection,
            "filters": input.filters,
            "timeframe": input.timeframe,
            "email": input.email,
            "latest": input.latest,
            "property_names": input.propertyNames
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "Authorization": _configuration.authorization
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if (_error) {
        		var errorResponse = _BaseController.validateResponse(_context, "getExtractionResource");
                callback(errorResponse.error, errorResponse.response, errorResponse.context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                callback(null, parsed, _context);
            } else {
                var errorResponse = _BaseController.validateResponse(_context, "getExtractionResource");
                callback(errorResponse.error, errorResponse.response, errorResponse.context);
            }
        }
        
        _request(_options, cb);
    }

};

module.exports = ExtractionResourceController;
