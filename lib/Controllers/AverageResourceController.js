/**
 * KeenIoLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/05/2017
 */

var _request = require('../Http/Client/RequestClient');
var _configuration = require('../configuration');
var _APIHelper = require('../APIHelper');
var _BaseController = require('./BaseController');

var AverageResourceController = {

    /**
     * returns the average across all numeric values for the target property in the event collection matching the given criteria. Non-numeric values are ignored. The response will be a simple JSON object with one key: result, which maps to the numeric result described previously. The response will be a simple JSON object with one key: result, which maps to the numeric result described previously.
     * All parameters to the endpoint are supplied through the object with their names
     * being the key and their desired values being the value. A list of parameters that can be used are:
     * 
     *     {string} version    Required parameter: Example: 
     *     {string} projectId    Required parameter: Example: 
     *     {string} eventCollection    Required parameter: - The name of the event collection you are analyzing.
     *     {string} targetProperty    Required parameter: The name of the property you are analyzing.
     *     {string} interval    Required parameter: An Interval specifies the size of time block to break a response into. This will cause a change in the response shape.
     *     {string|null} filters    Optional parameter: Filters are used to narrow down the events used in an analysis request based on event property values.
     *     {string|null} timeframe    Optional parameter: Similar to filters, a Timeframe is used to narrow down the events used in an analysis request based on the time that the event occurred.
     *     {string|null} timezone    Optional parameter: Modifies the timeframe filters for Relative Timeframes to match a specific timezone.
     *     {string|null} groupBy    Optional parameter: The group_by parameter specifies the name of a property by which you would like to group the results. Using this parameter changes the response format. Read more about Group By to learn more.
     * 
     * @param {object} input    RequiredParameter: object containing any of the parameters to this API Endpoint.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {CountResponse}
     */
    getAverageResource: function (input, callback) {
        //Assign default values
        input = input || {};

        //prepare query string for API call;
        var _baseUri = _configuration.BASEURI;
        
        var _queryBuilder = _baseUri + "/{version}/projects/{project_id}/queries/average";
        
        //Process template parameters
        _queryBuilder = _APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            "version": input.version,
            "project_id": input.projectId
        });

        //Process query parameters
        _queryBuilder = _APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
            "event_collection": input.eventCollection,
            "target_property": input.targetProperty,
            "interval": input.interval,
            "filters": input.filters,
            "timeframe": input.timeframe,
            "timezone": input.timezone,
            "group_by": input.groupBy
        });

        //validate and preprocess url
        var _queryUrl = _APIHelper.cleanUrl(_queryBuilder);
        
        //prepare headers
        var _headers = {
            "accept": "application/json",
            "Authorization": _configuration.authorization
        };

        //Construct the request
        var _options = {
            queryUrl: _queryUrl,
            method: "GET",
            headers: _headers,
        };
        
        //Build the response processing. 
        function cb (_error, _response, _context) {
            if (_error) {
        		var errorResponse = _BaseController.validateResponse(_context, "getAverageResource");
                callback(errorResponse.error, errorResponse.response, errorResponse.context);
            } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                var parsed = JSON.parse(_response.body);
                parsed = new CountResponse(parsed);
                callback(null, parsed, _context);
            } else {
                var errorResponse = _BaseController.validateResponse(_context, "getAverageResource");
                callback(errorResponse.error, errorResponse.response, errorResponse.context);
            }
        }
        
        _request(_options, cb);
    }

};

module.exports = AverageResourceController;
